dist: bionic
sudo: true
language: cpp
os: linux

addons:
  sonarcloud:
    organization: "jmramosr-github"
  apt:
    packages:
#      - g++
#      - gcc
#      - make
#      - lcov
#      - gcovr
#      - doxygen
      - cmake

#before_install:
#  - pip install codecov
#  - pip install gcovr

# the install step will take care of deploying a newer cmake version
install:
  - cmake --version
  - ls -la ${TRAVIS_BUILD_DIR}
  # first we create a directory for the CMake binaries
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
#  # we use wget to fetch the cmake binaries
#  - travis_retry wget --no-check-certificate https://cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz
#  # this is optional, but useful:
#  # do a quick md5 check to ensure that the archive we downloaded did not get compromised
#  - echo "f3546812c11ce7f5d64dc132a566b749 *cmake-3.3.2-Linux-x86_64.tar.gz" > cmake_md5.txt
#  - md5sum -c cmake_md5.txt
#  # extract the binaries; the output here is quite lengthy,
#  # so we swallow it to not clutter up the travis console
#  - tar -xvf cmake-3.3.2-Linux-x86_64.tar.gz > /dev/null
#  - mv cmake-3.3.2-Linux-x86_64 cmake-install
#  # add both the top-level directory and the bin directory from the archive
#  # to the system PATH. By adding it to the front of the path we hide the
#  # preinstalled CMake with our own.
#  - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
#  # don't forget to switch back to the main build directory once you are done
#  - cd ${TRAVIS_BUILD_DIR}


#cache:
#  apt: true
#  directories:
#  - "${TRAVIS_BUILD_DIR}/deps/doxygen"
#  - '$HOME/.sonar/cache'


#before_script:
#  # using: https://riptutorial.com/cmake/example/4723/configure-travis-ci-with-newest-cmake
#  # create a build folder for gtest
#  - mkdir cmake-gtest-build
#  # switch to that directory
#  - cd cmake-gtest-build
#  # run cmake for google tests
#  - cmake ../lib/gtest/CMakeLists.txt -B .
#  - ls -la #checker
#  - cmake --build .
#  - cd ..
#  - ls -la #checker
#  # create a build folder for the out-of-source build
#  - mkdir build
#  # switch to build directory
#  - cd build
#  # run cmake; here we assume that the project's
#  # top-level CMakeLists.txt is located at '..'
#  - cmake ..
#  - ls -la

script:
  - echo "Testing the travis environment!"
#  - build-wrapper-linux-x86-64 --out-dir bw-output cmake --build build/
#  - bash generate_gcov.sh
#  - sonar-scanner -Dsonar.cfamily.build-wrapper-output=bw-output
#
#after_success:
#  - codecov -t $CODECOV_TOKEN -X gcov
